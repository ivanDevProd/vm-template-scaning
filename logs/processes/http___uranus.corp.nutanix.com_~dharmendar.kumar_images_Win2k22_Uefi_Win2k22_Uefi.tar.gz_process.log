Processing payload with ID: 4ec0f32d-2750-4961-abc1-9ce1406836ea
Filename: /home/noc_admin/image_scanner_project/scanIt/scripts/uploadeImageToCluster_v2.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    36     37.5 MiB     37.5 MiB           1   @profile
    37                                         def download_and_extract_image(source_url, download_dir, extracted_dir, process_id):
    38     37.5 MiB      0.0 MiB           1       file_size_bytes = 0
    39     37.5 MiB      0.0 MiB           1       try:
    40                                                 # Retrieve file size using HEAD request
    41     37.5 MiB      0.0 MiB           1           response = requests.head(source_url)
    42     37.5 MiB      0.0 MiB           1           file_size_bytes = int(response.headers.get('Content-Length', 0))
    43     37.5 MiB      0.0 MiB           1           file_size_gb = file_size_bytes / (1024 ** 3)  # Convert bytes to gigabytes
    44     37.5 MiB      0.0 MiB           1           logging.info(f"File size: {file_size_gb:.2f} GB")
    45     39.2 MiB      1.8 MiB           1           log_to_database(process_id, f"Starting download of {source_url}. File size: {file_size_gb:.2f} GB", "INITIATED", source_url, "Download and Extraction")
    46                                             except Exception as e:
    47                                                 logging.error(f"Error retrieving file size: {e}")
    48                                                 log_to_database(process_id, f"Error retrieving file size: {e}", "FAILED", source_url, "Download and Extraction")
    49                                                 return None
    50                                         
    51     39.2 MiB      0.0 MiB           1       file_name = os.path.basename(source_url)
    52     39.2 MiB      0.0 MiB           1       download_path = os.path.join(download_dir, file_name)
    53                                         
    54     39.2 MiB      0.0 MiB           1       try:
    55                                                 # Download the file
    56     39.2 MiB      0.0 MiB           1           logging.info(f"Downloading file to {download_path}")
    57     39.2 MiB      0.0 MiB           1           urllib.request.urlretrieve(source_url, download_path)
    58     39.2 MiB      0.0 MiB           1           logging.info(f"Downloaded file to {download_path}")
    59     40.0 MiB      0.8 MiB           1           log_to_database(process_id, f"Downloaded file to {download_path}", "SUCCEEDED", source_url, "Download and Extraction")
    60                                             except Exception as e:
    61                                                 logging.error(f"Error during download: {e}")
    62                                                 log_to_database(process_id, f"Error during download: {e}", "FAILED", source_url, "Download and Extraction")
    63                                                 return None
    64                                             
    65     40.0 MiB      0.0 MiB           1       try:
    66                                                 # Analyze the .tar.gz file to count files and get sizes
    67     40.0 MiB      0.0 MiB           1           logging.info(f"Analyzing tar.gz file: {download_path}")
    68     40.0 MiB      0.0 MiB           1           with tarfile.open(download_path, "r:gz") as tar:
    69                                                     file_info = []
    70                                                     for member in tar.getmembers():
    71                                                         if member.isfile():  # Check if the member is a file, not a directory
    72                                                             file_info.append({
    73                                                                 'name': member.name,
    74                                                                 'size': member.size
    75                                                             })
    76                                                     
    77                                                     # Calculate file details
    78                                                     num_files = len(file_info)
    79                                                     total_size = sum(file['size'] for file in file_info)
    80                                                     
    81                                                     # Log file details
    82                                                     logging.info(f"Number of files in archive: {num_files}")
    83                                                     logging.info(f"Total size of files: {total_size / (1024 ** 2):.2f} MB")  # Convert bytes to MB
    84                                                     
    85                                                     # Add file details to database
    86                                                     log_to_database(process_id, f"Number of files in archive: {num_files}, Total size of files: {total_size / (1024 ** 2):.2f} MB", "INFO", source_url, "Download and Extraction")
    87                                         
    88                                                     if num_files != 1:
    89                                                         error_message = f"Multiple files found in archive. Found {num_files} files. Process aborted."
    90                                                         logging.error(error_message)
    91                                                         log_to_database(process_id, error_message, "FAILED", source_url, "Download and Extraction")
    92                                                         return None
    93                                                     
    94                                                     # Proceed to extract the single file
    95                                                     extracted_file_name = file_info[0]['name']
    96                                                     logging.info(f"Extracting image from {download_path} to {extracted_dir}")
    97                                                     log_to_database(process_id, f"Extracting image from {download_path} to {extracted_dir}", "INITIATED", source_url, "Download and Extraction")
    98                                         
    99                                                     try:
   100                                                         with tarfile.open(download_path, "r:gz") as tar:
   101                                                             # Extract the single file
   102                                                             member = tar.getmember(extracted_file_name)
   103                                                             logging.info(f"Extracting {member.name}...")
   104                                                             tar.extract(member, path=extracted_dir)
   105                                                         logging.info(f"Extraction completed to {extracted_dir}")
   106                                                     except Exception as e:
   107                                                         logging.error(f"Error during extraction: {e}")
   108                                                         log_to_database(process_id, f"Error during extraction: {e}", "FAILED", source_url, "Download and Extraction")
   109                                                         return None
   110                                         
   111                                                     # Generate URL for the extracted image
   112                                                     extracted_image_url = f"http://10.67.22.100/static/scanIt/extracted_images/{extracted_file_name}"
   113                                                     logging.info(f"Extracted image URL: {extracted_image_url}")
   114                                                     log_to_database(process_id, f"Extracted image URL: {extracted_image_url}", "SUCCEEDED", source_url, "Download and Extraction")
   115                                         
   116                                                     return extracted_image_url
   117                                         
   118     40.0 MiB      0.0 MiB           1       except Exception as e:
   119     40.0 MiB      0.0 MiB           1           logging.error(f"Error during extraction: {e}")
   120     40.0 MiB      0.0 MiB           1           log_to_database(process_id, f"Error during extraction: {e}", "FAILED", source_url, "Download and Extraction")
   121     40.0 MiB      0.0 MiB           1           return None


Failed to download and extract image.
Filename: /home/noc_admin/image_scanner_project/scanIt/scripts/uploadeImageToCluster_v2.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   182     37.5 MiB     37.5 MiB           1   @profile
   183                                         def upload_image_to_nutanix():
   184                                             # process_id = int(time.time() * 1000)  # Unique process ID using milliseconds
   185     37.5 MiB      0.0 MiB           1       process_id = generate_unique_id()
   186     37.5 MiB      0.0 MiB           1       json_data_str = sys.argv[1]
   187     37.5 MiB      0.0 MiB           1       try:
   188     37.5 MiB      0.0 MiB           1           payload = json.loads(json_data_str)
   189     37.5 MiB      0.0 MiB           1           print(f"Processing payload with ID: {process_id}")
   190                                             except json.JSONDecodeError as e:
   191                                                 print(f"Error decoding JSON: {e}")
   192                                                 return
   193                                         
   194                                             # Extract image name and source URL
   195     37.5 MiB      0.0 MiB           1       image_name = payload['spec']['name']
   196     37.5 MiB      0.0 MiB           1       source_url = payload['spec']['resources']['source_uri']
   197                                             
   198                                             # Define directories
   199     37.5 MiB      0.0 MiB           1       download_dir = '/home/noc_admin/image_scanner_project/downloads/'
   200     37.5 MiB      0.0 MiB           1       extracted_dir = '/home/noc_admin/image_scanner_project/static/scanIt/extracted_images/'
   201                                         
   202     37.5 MiB      0.0 MiB           1       if source_url.endswith('.tar.gz'):
   203     40.0 MiB      2.5 MiB           1           new_source_url = download_and_extract_image(source_url, download_dir, extracted_dir, process_id)
   204                                         
   205     40.0 MiB      0.0 MiB           1           if new_source_url:
   206                                                     payload['spec']['resources']['source_uri'] = new_source_url
   207                                                 else:
   208     40.0 MiB      0.0 MiB           1               print("Failed to download and extract image.")
   209     40.0 MiB      0.0 MiB           1               return
   210                                         
   211                                             # URL for image upload
   212                                             # upload_url = f"https://{cluster_ip}:9440/api/nutanix/v3/images"
   213                                             
   214                                             # try:
   215                                             #     upload_response = requests.post(
   216                                             #         upload_url,
   217                                             #         auth=HTTPBasicAuth(username, password),
   218                                             #         json=payload,
   219                                             #         verify=False
   220                                             #     )
   221                                             #     print(f"Upload Response Code: {upload_response.status_code}")
   222                                             #     print(f"Upload Response Content: {upload_response.text}")
   223                                             # except requests.RequestException as e:
   224                                             #     print(f"Failed to initiate image upload: {e}")
   225                                             #     return
   226                                         
   227                                             # if upload_response.status_code == 202:
   228                                             #     print("Image upload initiated successfully")
   229                                             #     task_uuid = upload_response.json().get('status', {}).get('execution_context', {}).get('task_uuid', '')
   230                                             #     print(f"Task UUID: {task_uuid}")
   231                                         
   232                                             #     task_url = f"https://{cluster_ip}:9440/api/nutanix/v3/tasks/{task_uuid}"
   233                                         
   234                                             #     log_to_database(process_id, f"Image upload initiated successfully. Task UUID: {task_uuid}", "INITIATED", source_url, "Cluster Image Upload")
   235                                         
   236                                             #     while True:
   237                                             #         try:
   238                                             #             task_response = requests.get(task_url, auth=HTTPBasicAuth(username, password), verify=False)
   239                                             #             task_status = task_response.json()
   240                                         
   241                                             #             state = task_status.get('status', 'UNKNOWN')
   242                                             #             percentage_complete = task_status.get('percentage_complete', 'N/A')
   243                                             #             print(f"State: {state}, Percentage completed: {percentage_complete}%")
   244                                         
   245                                             #             if state == 'SUCCEEDED':
   246                                             #                 print("Image upload completed successfully")
   247                                             #                 uuid = task_status['entity_reference_list'][0]['uuid']
   248                                             #                 print(f"Image UUID on cluster: {uuid}")
   249                                             #                 log_to_database(process_id, f"Image <{image_name}> successfully uploaded. Image UUID: {uuid}", "SUCCEEDED", source_url, "Cluster Image Upload")
   250                                         
   251                                             #                 log_to_database(process_id, f"NEXT STEPS STOPPED. Uncoment subprocess in uploadeImageToCluster_v2.py", "INFO", source_url, "Cluster Image Upload")
   252                                             #                 # script_path = '/home/noc_admin/image_scanner_project/scanIt/scripts/deployVm_v1.py'
   253                                             #                 # command = f"python3 {script_path} {process_id} {uuid} {image_name} {source_url}"
   254                                             #                 # subprocess.Popen(command, shell=True)
   255                                         
   256                                             #                 # Clean up the extracted file only if upload was successful
   257                                             #                 cleanup_extracted_file(new_source_url, extracted_dir, process_id)
   258                                             #                 break
   259                                         
   260                                             #             elif state == 'FAILED':
   261                                             #                 print("Image upload failed")
   262                                             #                 log_to_database(process_id, f"Image upload failed", "FAILED", source_url, "Cluster Image Upload")
   263                                             #                 break
   264                                         
   265                                             #         except requests.RequestException as e:
   266                                             #             print(f"Error retrieving task status: {e}")
   267                                         
   268                                             #         time.sleep(15)
   269                                         
   270                                             # else:
   271                                             #     print("Failed to initiate image upload")
   272                                             #     print(f"Response Code: {upload_response.status_code}")
   273                                             #     print(f"Response Content: {upload_response.text}")


Process 2457 dead!
Process 2457 detected
