/home/noc_admin/myenv/lib/python3.12/site-packages/urllib3/connectionpool.py:1099: InsecureRequestWarning: Unverified HTTPS request is being made to host '10.67.4.25'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#tls-warnings
  warnings.warn(
/home/noc_admin/myenv/lib/python3.12/site-packages/urllib3/connectionpool.py:1099: InsecureRequestWarning: Unverified HTTPS request is being made to host '10.67.4.25'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#tls-warnings
  warnings.warn(
/home/noc_admin/myenv/lib/python3.12/site-packages/urllib3/connectionpool.py:1099: InsecureRequestWarning: Unverified HTTPS request is being made to host '10.67.4.25'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#tls-warnings
  warnings.warn(
Processing payload with ID: 65b6192f-6c44-4e82-92ba-33f0dc390d9f
Task created successfully!
Task Key: DPROREQ-1024
Upload Response Code: 202
Upload Response Content: {"status": {"state": "PENDING", "execution_context": {"task_uuid": "40a11cdb-a6db-41de-b7c5-e9f404e06325"}}, "spec": {"name": "DPRO-AUTOMATION-kvm-AFSWindowsUVM-2.01.tar.gz.", "resources": {"image_type": "DISK_IMAGE", "source_uri": "http://endor.dyn.nutanix.com/GoldImages/agave/kvm/AFSWindowsUVM-2.01.tar.gz."}, "description": "http://endor.dyn.nutanix.com/GoldImages/agave/kvm/AFSWindowsUVM-2.01.tar.gz."}, "api_version": "3.1", "metadata": {"owner_reference": {"kind": "user", "uuid": "70e48f7a-1248-577a-9fd8-e2a1f767c889", "name": "itts"}, "use_categories_mapping": false, "kind": "image", "spec_version": 0, "uuid": "3ce10c6d-6b81-4987-9d55-140d1f0de4a8"}}
Image upload initiated successfully
Task UUID: 40a11cdb-a6db-41de-b7c5-e9f404e06325
Comment added successfully!
State: RUNNING, Percentage completed: 0%
State: FAILED, Percentage completed: 100%
Image upload failed
Comment added successfully!
Filename: /home/noc_admin/image_scanner_project/scanIt/scripts/uploadeImageToCluster_v2.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   284     37.8 MiB     37.8 MiB           1   @profile
   285                                         def upload_image_to_nutanix():
   286     37.8 MiB      0.0 MiB           1       process_id = generate_unique_id()
   287     37.8 MiB      0.0 MiB           1       json_data_str = sys.argv[1]
   288     37.8 MiB      0.0 MiB           1       try:
   289     37.8 MiB      0.0 MiB           1           payload = json.loads(json_data_str)
   290     37.8 MiB      0.0 MiB           1           print(f"Processing payload with ID: {process_id}")
   291                                             except json.JSONDecodeError as e:
   292                                                 print(f"Error decoding JSON: {e}")
   293                                                 return
   294                                         
   295                                             # Extract image name and source URL
   296     37.8 MiB      0.0 MiB           1       image_name = payload['spec']['name']
   297     37.8 MiB      0.0 MiB           1       source_url = payload['spec']['resources']['source_uri']
   298                                             
   299                                             # Create Jira case
   300     38.2 MiB      0.5 MiB           1       new_jira_task = create_jira_task("New scan request", "A ticket created based on a request received through the self-selfice portal. New image scan request")
   301     38.2 MiB      0.0 MiB           1       if new_jira_task:
   302     39.8 MiB      1.5 MiB           1           log_to_database(process_id, f"Jira ticket: {new_jira_task}", "SUCCEEDED", source_url, "Jira case")
   303                                             else:
   304                                                 log_to_database(process_id, f"Jira ticket not created. There was a problem. The scanning process will continue without recording in the ticket", "FAILED", source_url, "Jira case")
   305                                             
   306                                             # Define directories
   307     39.8 MiB      0.0 MiB           1       download_dir = '/home/noc_admin/image_scanner_project/downloads/'
   308     39.8 MiB      0.0 MiB           1       extracted_dir = '/home/noc_admin/image_scanner_project/static/scanIt/extracted_images/'
   309                                         
   310     39.8 MiB      0.0 MiB           1       if source_url.endswith('.tar.gz'):   
   311                                                 new_source_url = download_and_extract_image(source_url, download_dir, extracted_dir, process_id)
   312                                         
   313                                                 if new_source_url:
   314                                                     payload['spec']['resources']['source_uri'] = new_source_url
   315                                                 else:
   316                                                     print("Failed to download and extract image.")
   317                                                     return
   318                                         
   319                                             # URL for image upload
   320     39.8 MiB      0.0 MiB           1       upload_url = f"https://{cluster_ip}:9440/api/nutanix/v3/images"
   321                                             
   322     39.8 MiB      0.0 MiB           1       try:
   323     39.8 MiB      0.0 MiB           2           upload_response = requests.post(
   324     39.8 MiB      0.0 MiB           1               upload_url,
   325     39.8 MiB      0.0 MiB           1               auth=HTTPBasicAuth(username, password),
   326     39.8 MiB      0.0 MiB           1               json=payload,
   327     39.8 MiB      0.0 MiB           1               verify=False
   328                                                 )
   329     39.8 MiB      0.0 MiB           1           print(f"Upload Response Code: {upload_response.status_code}")
   330     39.8 MiB      0.0 MiB           1           print(f"Upload Response Content: {upload_response.text}")
   331                                             except requests.RequestException as e:
   332                                                 print(f"Failed to initiate image upload: {e}")
   333                                                 return
   334                                         
   335     39.8 MiB      0.0 MiB           1       if upload_response.status_code == 202:
   336     39.8 MiB      0.0 MiB           1           print("Image upload initiated successfully")
   337                                                 
   338     39.8 MiB      0.0 MiB           1           task_uuid = upload_response.json().get('status', {}).get('execution_context', {}).get('task_uuid', '')
   339     39.8 MiB      0.0 MiB           1           print(f"Task UUID: {task_uuid}")
   340                                         
   341     39.8 MiB      0.0 MiB           1           task_url = f"https://{cluster_ip}:9440/api/nutanix/v3/tasks/{task_uuid}"
   342                                         
   343     40.5 MiB      0.8 MiB           1           log_to_database(process_id, f"Image upload initiated successfully. Task UUID: {task_uuid}", "INITIATED", source_url, "Cluster Image Upload")
   344                                         
   345     40.5 MiB      0.0 MiB           1           if new_jira_task:
   346     40.5 MiB      0.0 MiB           1               add_comment_to_jira_task(new_jira_task, f"Image upload initiated successfully.")
   347                                         
   348     40.5 MiB      0.0 MiB           2           while True:
   349     40.5 MiB      0.0 MiB           2               try:
   350     41.2 MiB      0.8 MiB           2                   task_response = requests.get(task_url, auth=HTTPBasicAuth(username, password), verify=False)
   351     41.2 MiB      0.0 MiB           2                   task_status = task_response.json()
   352                                         
   353     41.2 MiB      0.0 MiB           2                   state = task_status.get('status', 'UNKNOWN')
   354     41.2 MiB      0.0 MiB           2                   percentage_complete = task_status.get('percentage_complete', 'N/A')
   355     41.2 MiB      0.0 MiB           2                   print(f"State: {state}, Percentage completed: {percentage_complete}%")
   356                                         
   357     41.2 MiB      0.0 MiB           2                   if state == 'SUCCEEDED':
   358                                                             print("Image upload completed successfully")
   359                                                             uuid = task_status['entity_reference_list'][0]['uuid']
   360                                                             print(f"Image UUID on cluster: {uuid}")
   361                                                             log_to_database(process_id, f"Image <{image_name}> successfully uploaded. Image UUID: {uuid}", "SUCCEEDED", source_url, "Cluster Image Upload")
   362                                                             if new_jira_task:
   363                                                                 add_comment_to_jira_task(new_jira_task, f"Image successfully uploaded.")
   364                                         
   365                                                             log_to_database(process_id, f"NEXT STEPS STOPPED. Uncoment subprocess in uploadeImageToCluster_v2.py", "INFO", source_url, "Cluster Image Upload")
   366                                                             # script_path = '/home/noc_admin/image_scanner_project/scanIt/scripts/deployVm_v1.py'
   367                                                             # command = f"python3 {script_path} {process_id} {uuid} {image_name} {source_url}"
   368                                                             # subprocess.Popen(command, shell=True)
   369                                         
   370                                                             # Clean up the extracted file only if upload was successful
   371                                                             cleanup_extracted_file(new_source_url, extracted_dir, process_id)
   372                                                             break
   373                                         
   374     41.2 MiB      0.0 MiB           2                   elif state == 'FAILED':
   375     41.2 MiB      0.0 MiB           1                       print("Image upload failed")
   376     41.5 MiB      0.2 MiB           1                       log_to_database(process_id, f"Image upload failed", "FAILED", source_url, "Cluster Image Upload")
   377                                         
   378     41.5 MiB      0.0 MiB           1                       if new_jira_task:
   379     41.5 MiB      0.0 MiB           1                           add_comment_to_jira_task(new_jira_task, f"Image upload failed.")
   380     41.5 MiB      0.0 MiB           1                       break
   381                                         
   382                                                     except requests.RequestException as e:
   383                                                         print(f"Error retrieving task status: {e}")
   384                                         
   385     40.5 MiB      0.0 MiB           1               time.sleep(15)
   386                                         
   387                                             else:
   388                                                 print("Failed to initiate image upload")
   389                                                 print(f"Response Code: {upload_response.status_code}")
   390                                                 print(f"Response Content: {upload_response.text}")


Process 30643 dead!
Process 30643 detected
