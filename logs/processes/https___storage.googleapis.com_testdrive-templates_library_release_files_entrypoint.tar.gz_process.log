Processing payload with ID: f9b39d5a-4f4b-4f37-b418-d7847273c2e8
Task created successfully!
Task Key: DPROREQ-1038
Comment added successfully!
Comment added successfully!
Comment added successfully!
Filename: /home/noc_admin/image_scanner_project/scanIt/scripts/uploadeImageToCluster_v2.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   123     39.5 MiB     39.5 MiB           1   @profile
   124                                         def download_and_extract_image(source_url, download_dir, extracted_dir, process_id, jira_task_key=None):
   125     39.5 MiB      0.0 MiB           1       file_size_bytes = 0
   126     39.5 MiB      0.0 MiB           1       try:
   127                                                 # Retrieve file size using HEAD request
   128     39.5 MiB      0.0 MiB           1           response = requests.head(source_url)
   129     39.5 MiB      0.0 MiB           1           file_size_bytes = int(response.headers.get('Content-Length', 0))
   130     39.5 MiB      0.0 MiB           1           if file_size_bytes == 0:
   131                                                     logging.warning(f"Could not retrieve file size from headers: {source_url}")
   132     39.5 MiB      0.0 MiB           1           file_size_gb = file_size_bytes / (1024 ** 3)  # Convert bytes to gigabytes
   133     39.5 MiB      0.0 MiB           1           logging.info(f"File size: {file_size_gb:.2f} GB")
   134     39.5 MiB      0.0 MiB           1           log_to_database(process_id, f"Download started: {source_url}. File size: {file_size_gb:.2f} GB", "INITIATED", source_url, "Download and Extraction")
   135                                         
   136     39.5 MiB      0.0 MiB           1           if jira_task_key:
   137     39.5 MiB      0.0 MiB           1               add_comment_to_jira_task(jira_task_key, f"Starting download of {source_url}. File size: {file_size_gb:.2f} GB")
   138                                                     
   139                                             except Exception as e:
   140                                                 logging.error(f"Error retrieving file size: {e}")
   141                                                 log_to_database(process_id, f"Error retrieving file size: {e}", "FAILED", source_url, "Download and Extraction")
   142                                                 return None
   143                                         
   144     39.5 MiB      0.0 MiB           1       file_name = os.path.basename(source_url)
   145     39.5 MiB      0.0 MiB           1       download_path = os.path.join(download_dir, file_name)
   146                                         
   147     39.5 MiB      0.0 MiB           1       try:
   148                                                 # Download the file using requests to stream large files
   149     39.5 MiB      0.0 MiB           1           logging.info(f"Downloading file to {download_path}")
   150     39.5 MiB      0.0 MiB           2           with requests.get(source_url, stream=True) as response:
   151     39.5 MiB      0.0 MiB           1               response.raise_for_status()
   152     39.5 MiB      0.0 MiB           2               with open(download_path, 'wb') as f:
   153     39.5 MiB      0.0 MiB           6                   for chunk in response.iter_content(chunk_size=8192):  # Download in 8KB chunks
   154     39.5 MiB      0.0 MiB           5                       f.write(chunk)
   155     39.5 MiB      0.0 MiB           1           logging.info(f"Downloaded file to {download_path}")
   156     39.5 MiB      0.0 MiB           1           log_to_database(process_id, f"File downloaded: {download_path}", "SUCCEEDED", source_url, "Download and Extraction")
   157                                                 
   158     39.5 MiB      0.0 MiB           1           if jira_task_key:
   159     39.5 MiB      0.0 MiB           1               add_comment_to_jira_task(jira_task_key, f"The archived file has been downloaded to the server.")
   160                                         
   161                                             except Exception as e:
   162                                                 logging.error(f"Error during download: {e}")
   163                                                 log_to_database(process_id, f"Error during download: {e}", "FAILED", source_url, "Download and Extraction")
   164                                         
   165                                                 if jira_task_key:
   166                                                     add_comment_to_jira_task(jira_task_key, f"Error during download: {e}")
   167                                         
   168                                                 return None
   169                                         
   170     39.5 MiB      0.0 MiB           1       try:
   171                                                 # Analyze and extract the tar file
   172     39.5 MiB      0.0 MiB           1           logging.info(f"Attempting to analyze tar file: {download_path}")
   173     39.8 MiB      0.2 MiB           2           with tarfile.open(download_path, "r:*") as tar:  # "r:*" handles both gzip and uncompressed tar
   174     39.8 MiB      0.0 MiB          71               file_info = [member for member in tar.getmembers() if member.isfile()]
   175                                                     
   176                                                     # Calculate file details
   177     39.8 MiB      0.0 MiB           1               num_files = len(file_info)
   178     39.8 MiB      0.0 MiB         133               total_size = sum(file.size for file in file_info)
   179                                                     
   180                                                     # Log file details
   181     39.8 MiB      0.0 MiB           1               logging.info(f"Number of files in archive: {num_files}")
   182     39.8 MiB      0.0 MiB           1               logging.info(f"Total size of files: {total_size / (1024 ** 2):.2f} MB")
   183     39.8 MiB      0.0 MiB           1               log_to_database(process_id, f"Number of files in archive: {num_files}, Total size of files: {total_size / (1024 ** 2):.2f} MB", "INFO", source_url, "Download and Extraction")
   184                                         
   185     39.8 MiB      0.0 MiB           1               if jira_task_key:
   186     39.8 MiB      0.0 MiB           1                   add_comment_to_jira_task(jira_task_key, f"Number of files in archive: {num_files}, Total size of files: {total_size / (1024 ** 2):.2f} MB")
   187                                         
   188     39.8 MiB      0.0 MiB           1               if num_files != 1:
   189     39.8 MiB      0.0 MiB           1                   error_message = f"Multiple files found in archive. Found {num_files} files. Process aborted."
   190     39.8 MiB      0.0 MiB           1                   logging.error(error_message)
   191     39.8 MiB      0.0 MiB           1                   log_to_database(process_id, error_message, "FAILED", source_url, "Download and Extraction")
   192     39.8 MiB      0.0 MiB           1                   return None
   193                                         
   194                                                     # Proceed to extract the single file
   195                                                     extracted_file_name = file_info[0].name
   196                                                     logging.info(f"Extracting image from {download_path} to {extracted_dir}")
   197                                                     log_to_database(process_id, f"Extracting image from {download_path} to {extracted_dir}", "INITIATED", source_url, "Download and Extraction")
   198                                         
   199                                                     if jira_task_key:
   200                                                         add_comment_to_jira_task(jira_task_key, f"Extracting image initiated.")
   201                                         
   202                                                     tar.extract(file_info[0], path=extracted_dir)
   203                                                     logging.info(f"Extraction completed to {extracted_dir}")
   204                                         
   205                                                 # Generate URL for the extracted image
   206                                                 extracted_image_url = f"http://10.67.22.100/static/scanIt/extracted_images/{extracted_file_name}"
   207                                                 logging.info(f"Extracted image URL: {extracted_image_url}")
   208                                                 log_to_database(process_id, f"Extracted image URL: {extracted_image_url}", "SUCCEEDED", source_url, "Download and Extraction")
   209                                         
   210                                                 if jira_task_key:
   211                                                     add_comment_to_jira_task(jira_task_key, f"Extraction completed.")
   212                                         
   213                                                 return extracted_image_url
   214                                         
   215                                             except Exception as e:
   216                                                 logging.error(f"Error during extraction: {e}")
   217                                                 log_to_database(process_id, f"Error during extraction: {e}", "FAILED", source_url, "Download and Extraction")
   218                                         
   219                                                 if jira_task_key:
   220                                                     add_comment_to_jira_task(jira_task_key, f"Error during extraction: {e}")
   221                                                 return None


Failed to download and extract image.
Filename: /home/noc_admin/image_scanner_project/scanIt/scripts/uploadeImageToCluster_v2.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   284     36.2 MiB     36.2 MiB           1   @profile
   285                                         def upload_image_to_nutanix():
   286     36.2 MiB      0.0 MiB           1       process_id = generate_unique_id()
   287     36.2 MiB      0.0 MiB           1       json_data_str = sys.argv[1]
   288     36.2 MiB      0.0 MiB           1       try:
   289     36.2 MiB      0.0 MiB           1           payload = json.loads(json_data_str)
   290     36.2 MiB      0.0 MiB           1           print(f"Processing payload with ID: {process_id}")
   291                                             except json.JSONDecodeError as e:
   292                                                 print(f"Error decoding JSON: {e}")
   293                                                 return
   294                                         
   295                                             # Extract image name and source URL
   296     36.2 MiB      0.0 MiB           1       image_name = payload['spec']['name']
   297     36.2 MiB      0.0 MiB           1       source_url = payload['spec']['resources']['source_uri']
   298                                             
   299                                             # Create Jira case
   300     37.0 MiB      0.8 MiB           1       new_jira_task = create_jira_task("New scan request", "A ticket created based on a request received through the self-selfice portal. New image scan request")
   301     37.0 MiB      0.0 MiB           1       if new_jira_task:
   302     39.5 MiB      2.5 MiB           1           log_to_database(process_id, f"Jira ticket: {new_jira_task}", "SUCCEEDED", source_url, "Jira case")
   303                                             else:
   304                                                 log_to_database(process_id, f"Jira ticket not created. There was a problem. The scanning process will continue without recording in the ticket", "FAILED", source_url, "Jira case")
   305                                             
   306                                             # Define directories
   307     39.5 MiB      0.0 MiB           1       download_dir = '/home/noc_admin/image_scanner_project/downloads/'
   308     39.5 MiB      0.0 MiB           1       extracted_dir = '/home/noc_admin/image_scanner_project/static/scanIt/extracted_images/'
   309                                         
   310     39.5 MiB      0.0 MiB           1       if source_url.endswith('.tar.gz'):   
   311     39.8 MiB      0.2 MiB           1           new_source_url = download_and_extract_image(source_url, download_dir, extracted_dir, process_id, new_jira_task)
   312                                         
   313     39.8 MiB      0.0 MiB           1           if new_source_url:
   314                                                     payload['spec']['resources']['source_uri'] = new_source_url
   315                                                 else:
   316     39.8 MiB      0.0 MiB           1               print("Failed to download and extract image.")
   317     39.8 MiB      0.0 MiB           1               return
   318                                         
   319                                             # URL for image upload
   320                                             upload_url = f"https://{cluster_ip}:9440/api/nutanix/v3/images"
   321                                             
   322                                             try:
   323                                                 upload_response = requests.post(
   324                                                     upload_url,
   325                                                     auth=HTTPBasicAuth(username, password),
   326                                                     json=payload,
   327                                                     verify=False
   328                                                 )
   329                                                 print(f"Upload Response Code: {upload_response.status_code}")
   330                                                 print(f"Upload Response Content: {upload_response.text}")
   331                                             except requests.RequestException as e:
   332                                                 print(f"Failed to initiate image upload: {e}")
   333                                                 return
   334                                         
   335                                             if upload_response.status_code == 202:
   336                                                 print("Image upload initiated successfully")
   337                                                 
   338                                                 task_uuid = upload_response.json().get('status', {}).get('execution_context', {}).get('task_uuid', '')
   339                                                 print(f"Task UUID: {task_uuid}")
   340                                         
   341                                                 task_url = f"https://{cluster_ip}:9440/api/nutanix/v3/tasks/{task_uuid}"
   342                                         
   343                                                 log_to_database(process_id, f"Image upload initiated successfully. Task UUID: {task_uuid}", "INITIATED", source_url, "Cluster Image Upload")
   344                                         
   345                                                 if new_jira_task:
   346                                                     add_comment_to_jira_task(new_jira_task, f"Image upload initiated successfully.")
   347                                         
   348                                                 while True:
   349                                                     try:
   350                                                         task_response = requests.get(task_url, auth=HTTPBasicAuth(username, password), verify=False)
   351                                                         task_status = task_response.json()
   352                                         
   353                                                         state = task_status.get('status', 'UNKNOWN')
   354                                                         percentage_complete = task_status.get('percentage_complete', 'N/A')
   355                                                         print(f"State: {state}, Percentage completed: {percentage_complete}%")
   356                                         
   357                                                         if state == 'SUCCEEDED':
   358                                                             print("Image upload completed successfully")
   359                                                             uuid = task_status['entity_reference_list'][0]['uuid']
   360                                                             print(f"Image UUID on cluster: {uuid}")
   361                                                             log_to_database(process_id, f"Image <{image_name}> successfully uploaded. Image UUID: {uuid}", "SUCCEEDED", source_url, "Cluster Image Upload")
   362                                                             if new_jira_task:
   363                                                                 add_comment_to_jira_task(new_jira_task, f"Image successfully uploaded.")
   364                                         
   365                                                             # log_to_database(process_id, f"NEXT STEPS STOPPED. Uncoment subprocess in uploadeImageToCluster_v2.py", "INFO", source_url, "Cluster Image Upload")
   366                                                             script_path = '/home/noc_admin/image_scanner_project/scanIt/scripts/deployVm_v1.py'
   367                                                             command = f"python3 {script_path} {process_id} {uuid} {image_name} {source_url} {new_jira_task}"
   368                                                             subprocess.Popen(command, shell=True)
   369                                         
   370                                                             # Clean up the extracted file only if upload was successful
   371                                                             cleanup_extracted_file(new_source_url, extracted_dir, process_id)
   372                                                             break
   373                                         
   374                                                         elif state == 'FAILED':
   375                                                             print("Image upload failed")
   376                                                             log_to_database(process_id, f"Image upload failed", "FAILED", source_url, "Cluster Image Upload")
   377                                         
   378                                                             if new_jira_task:
   379                                                                 add_comment_to_jira_task(new_jira_task, f"Image upload failed.")
   380                                                             break
   381                                         
   382                                                     except requests.RequestException as e:
   383                                                         print(f"Error retrieving task status: {e}")
   384                                         
   385                                                     time.sleep(15)
   386                                         
   387                                             else:
   388                                                 print("Failed to initiate image upload")
   389                                                 print(f"Response Code: {upload_response.status_code}")
   390                                                 print(f"Response Content: {upload_response.text}")


Process 53398 dead!
Process 53398 detected
