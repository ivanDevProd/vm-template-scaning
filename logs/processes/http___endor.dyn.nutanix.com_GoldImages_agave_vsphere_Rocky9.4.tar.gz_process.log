Processing payload with ID: 993835a4-17fd-4e06-998c-0e39c88e00b4
Filename: /home/noc_admin/image_scanner_project/scanIt/scripts/uploadeImageToCluster_v2.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    37     37.2 MiB     37.2 MiB           1   @profile
    38                                         def download_and_extract_image(source_url, download_dir, extracted_dir, process_id):
    39     37.2 MiB      0.0 MiB           1       file_size_bytes = 0
    40     37.2 MiB      0.0 MiB           1       try:
    41                                                 # Retrieve file size using HEAD request
    42     37.5 MiB      0.2 MiB           1           response = requests.head(source_url)
    43     37.5 MiB      0.0 MiB           1           file_size_bytes = int(response.headers.get('Content-Length', 0))
    44     37.5 MiB      0.0 MiB           1           if file_size_bytes == 0:
    45                                                     logging.warning(f"Could not retrieve file size from headers: {source_url}")
    46     37.5 MiB      0.0 MiB           1           file_size_gb = file_size_bytes / (1024 ** 3)  # Convert bytes to gigabytes
    47     37.5 MiB      0.0 MiB           1           logging.info(f"File size: {file_size_gb:.2f} GB")
    48     39.2 MiB      1.8 MiB           1           log_to_database(process_id, f"Starting download of {source_url}. File size: {file_size_gb:.2f} GB", "INITIATED", source_url, "Download and Extraction")
    49                                             except Exception as e:
    50                                                 logging.error(f"Error retrieving file size: {e}")
    51                                                 log_to_database(process_id, f"Error retrieving file size: {e}", "FAILED", source_url, "Download and Extraction")
    52                                                 return None
    53                                         
    54     39.2 MiB      0.0 MiB           1       file_name = os.path.basename(source_url)
    55     39.2 MiB      0.0 MiB           1       download_path = os.path.join(download_dir, file_name)
    56                                         
    57     39.2 MiB      0.0 MiB           1       try:
    58                                                 # Download the file using requests to stream large files
    59     39.2 MiB      0.0 MiB           1           logging.info(f"Downloading file to {download_path}")
    60     39.2 MiB      0.0 MiB           2           with requests.get(source_url, stream=True) as response:
    61     39.2 MiB      0.0 MiB           1               response.raise_for_status()
    62     39.2 MiB      0.0 MiB           2               with open(download_path, 'wb') as f:
    63     39.2 MiB      0.0 MiB      476880                   for chunk in response.iter_content(chunk_size=8192):  # Download in 8KB chunks
    64     39.2 MiB      0.0 MiB      476879                       f.write(chunk)
    65     39.2 MiB      0.0 MiB           1           logging.info(f"Downloaded file to {download_path}")
    66     39.2 MiB      0.0 MiB           1           log_to_database(process_id, f"Downloaded file to {download_path}", "SUCCEEDED", source_url, "Download and Extraction")
    67                                             except Exception as e:
    68                                                 logging.error(f"Error during download: {e}")
    69                                                 log_to_database(process_id, f"Error during download: {e}", "FAILED", source_url, "Download and Extraction")
    70                                                 return None
    71                                         
    72     39.2 MiB      0.0 MiB           1       try:
    73                                                 # Analyze and extract the tar file
    74     39.2 MiB      0.0 MiB           1           logging.info(f"Attempting to analyze tar file: {download_path}")
    75     39.8 MiB      0.2 MiB           2           with tarfile.open(download_path, "r:*") as tar:  # "r:*" handles both gzip and uncompressed tar
    76     39.8 MiB      0.2 MiB           8               file_info = [member for member in tar.getmembers() if member.isfile()]
    77                                                     
    78                                                     # Calculate file details
    79     39.8 MiB      0.0 MiB           1               num_files = len(file_info)
    80     39.8 MiB      0.0 MiB          15               total_size = sum(file.size for file in file_info)
    81                                                     
    82                                                     # Log file details
    83     39.8 MiB      0.0 MiB           1               logging.info(f"Number of files in archive: {num_files}")
    84     39.8 MiB      0.0 MiB           1               logging.info(f"Total size of files: {total_size / (1024 ** 2):.2f} MB")
    85     39.8 MiB      0.0 MiB           1               log_to_database(process_id, f"Number of files in archive: {num_files}, Total size of files: {total_size / (1024 ** 2):.2f} MB", "INFO", source_url, "Download and Extraction")
    86                                         
    87     39.8 MiB      0.0 MiB           1               if num_files != 1:
    88     39.8 MiB      0.0 MiB           1                   error_message = f"Multiple files found in archive. Found {num_files} files. Process aborted."
    89     39.8 MiB      0.0 MiB           1                   logging.error(error_message)
    90     39.8 MiB      0.0 MiB           1                   log_to_database(process_id, error_message, "FAILED", source_url, "Download and Extraction")
    91     39.8 MiB      0.0 MiB           1                   return None
    92                                         
    93                                                     # Proceed to extract the single file
    94                                                     extracted_file_name = file_info[0].name
    95                                                     logging.info(f"Extracting image from {download_path} to {extracted_dir}")
    96                                                     log_to_database(process_id, f"Extracting image from {download_path} to {extracted_dir}", "INITIATED", source_url, "Download and Extraction")
    97                                         
    98                                                     tar.extract(file_info[0], path=extracted_dir)
    99                                                     logging.info(f"Extraction completed to {extracted_dir}")
   100                                         
   101                                                 # Generate URL for the extracted image
   102                                                 extracted_image_url = f"http://10.67.22.100/static/scanIt/extracted_images/{extracted_file_name}"
   103                                                 logging.info(f"Extracted image URL: {extracted_image_url}")
   104                                                 log_to_database(process_id, f"Extracted image URL: {extracted_image_url}", "SUCCEEDED", source_url, "Download and Extraction")
   105                                         
   106                                                 return extracted_image_url
   107                                         
   108                                             except Exception as e:
   109                                                 logging.error(f"Error during extraction: {e}")
   110                                                 log_to_database(process_id, f"Error during extraction: {e}", "FAILED", source_url, "Download and Extraction")
   111                                                 return None


Failed to download and extract image.
Filename: /home/noc_admin/image_scanner_project/scanIt/scripts/uploadeImageToCluster_v2.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   172     37.2 MiB     37.2 MiB           1   @profile
   173                                         def upload_image_to_nutanix():
   174                                             # process_id = int(time.time() * 1000)  # Unique process ID using milliseconds
   175     37.2 MiB      0.0 MiB           1       process_id = generate_unique_id()
   176     37.2 MiB      0.0 MiB           1       json_data_str = sys.argv[1]
   177     37.2 MiB      0.0 MiB           1       try:
   178     37.2 MiB      0.0 MiB           1           payload = json.loads(json_data_str)
   179     37.2 MiB      0.0 MiB           1           print(f"Processing payload with ID: {process_id}")
   180                                             except json.JSONDecodeError as e:
   181                                                 print(f"Error decoding JSON: {e}")
   182                                                 return
   183                                         
   184                                             # Extract image name and source URL
   185     37.2 MiB      0.0 MiB           1       image_name = payload['spec']['name']
   186     37.2 MiB      0.0 MiB           1       source_url = payload['spec']['resources']['source_uri']
   187                                             
   188                                             # Define directories
   189     37.2 MiB      0.0 MiB           1       download_dir = '/home/noc_admin/image_scanner_project/downloads/'
   190     37.2 MiB      0.0 MiB           1       extracted_dir = '/home/noc_admin/image_scanner_project/static/scanIt/extracted_images/'
   191                                         
   192     37.2 MiB      0.0 MiB           1       if source_url.endswith('.tar.gz'):
   193     39.8 MiB      2.5 MiB           1           new_source_url = download_and_extract_image(source_url, download_dir, extracted_dir, process_id)
   194                                         
   195     39.8 MiB      0.0 MiB           1           if new_source_url:
   196                                                     payload['spec']['resources']['source_uri'] = new_source_url
   197                                                 else:
   198     39.8 MiB      0.0 MiB           1               print("Failed to download and extract image.")
   199     39.8 MiB      0.0 MiB           1               return
   200                                         
   201                                             # URL for image upload
   202                                             upload_url = f"https://{cluster_ip}:9440/api/nutanix/v3/images"
   203                                             
   204                                             try:
   205                                                 upload_response = requests.post(
   206                                                     upload_url,
   207                                                     auth=HTTPBasicAuth(username, password),
   208                                                     json=payload,
   209                                                     verify=False
   210                                                 )
   211                                                 print(f"Upload Response Code: {upload_response.status_code}")
   212                                                 print(f"Upload Response Content: {upload_response.text}")
   213                                             except requests.RequestException as e:
   214                                                 print(f"Failed to initiate image upload: {e}")
   215                                                 return
   216                                         
   217                                             if upload_response.status_code == 202:
   218                                                 print("Image upload initiated successfully")
   219                                                 task_uuid = upload_response.json().get('status', {}).get('execution_context', {}).get('task_uuid', '')
   220                                                 print(f"Task UUID: {task_uuid}")
   221                                         
   222                                                 task_url = f"https://{cluster_ip}:9440/api/nutanix/v3/tasks/{task_uuid}"
   223                                         
   224                                                 log_to_database(process_id, f"Image upload initiated successfully. Task UUID: {task_uuid}", "INITIATED", source_url, "Cluster Image Upload")
   225                                         
   226                                                 while True:
   227                                                     try:
   228                                                         task_response = requests.get(task_url, auth=HTTPBasicAuth(username, password), verify=False)
   229                                                         task_status = task_response.json()
   230                                         
   231                                                         state = task_status.get('status', 'UNKNOWN')
   232                                                         percentage_complete = task_status.get('percentage_complete', 'N/A')
   233                                                         print(f"State: {state}, Percentage completed: {percentage_complete}%")
   234                                         
   235                                                         if state == 'SUCCEEDED':
   236                                                             print("Image upload completed successfully")
   237                                                             uuid = task_status['entity_reference_list'][0]['uuid']
   238                                                             print(f"Image UUID on cluster: {uuid}")
   239                                                             log_to_database(process_id, f"Image <{image_name}> successfully uploaded. Image UUID: {uuid}", "SUCCEEDED", source_url, "Cluster Image Upload")
   240                                         
   241                                                             log_to_database(process_id, f"NEXT STEPS STOPPED. Uncoment subprocess in uploadeImageToCluster_v2.py", "INFO", source_url, "Cluster Image Upload")
   242                                                             # script_path = '/home/noc_admin/image_scanner_project/scanIt/scripts/deployVm_v1.py'
   243                                                             # command = f"python3 {script_path} {process_id} {uuid} {image_name} {source_url}"
   244                                                             # subprocess.Popen(command, shell=True)
   245                                         
   246                                                             # Clean up the extracted file only if upload was successful
   247                                                             cleanup_extracted_file(new_source_url, extracted_dir, process_id)
   248                                                             break
   249                                         
   250                                                         elif state == 'FAILED':
   251                                                             print("Image upload failed")
   252                                                             log_to_database(process_id, f"Image upload failed", "FAILED", source_url, "Cluster Image Upload")
   253                                                             break
   254                                         
   255                                                     except requests.RequestException as e:
   256                                                         print(f"Error retrieving task status: {e}")
   257                                         
   258                                                     time.sleep(15)
   259                                         
   260                                             else:
   261                                                 print("Failed to initiate image upload")
   262                                                 print(f"Response Code: {upload_response.status_code}")
   263                                                 print(f"Response Content: {upload_response.text}")


Process 14309 dead!
Process 14309 detected
